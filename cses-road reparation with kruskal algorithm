#include <bits/stdc++.h>
using namespace std;
const int N=1e5;
vector<long long> parent(N);
vector<long long> sz(N);
vector<vector<long long>> edges;

void make_pair(int v){
    parent[v]=v;
    sz[v]=1;
}
int find_set(int v){
    if(v==parent[v]){
        return v;
    }
    return parent[v]=find_set(parent[v]);
}
void union_sets(int a,int b){
     a=find_set(a);
     b=find_set(b);
    if(a!=b){
        if(sz[a]<sz[b]){
            swap(a,b);
        }
        parent[b]=a;
        sz[a]+=sz[b];
    }

}

int main() {
    for(int i=0;i<N;i++){
        make_pair(i);
    }
    long long n,m;
    cin>>n>>m;
    for(int i=0;i<m;i++){
        long long a,b,c;
        cin>>a>>b>>c;
        edges.push_back({c,a,b});
    }
    sort(edges.begin(),edges.end());
    long long cost=0;
    int edge_used=0;
    for(auto i : edges){
        int c=i[0];
        int a=i[1];
        int b=i[2];
        int x=find_set(a);
        int y=find_set(b);
        if(x==y){
            continue;
        }
        else{
            cost+=c;
            union_sets(a,b);
            edge_used++;
        }
    }
    if(edge_used==n-1){
        cout<<cost<<endl;

    }
    else{
        cout<<"IMPOSSIBLE"<<endl;
    }
    

    return 0;
}
