#include <bits/stdc++.h>
using namespace std;
const long long inf = 1e18;

int main() {
    int n, m, st, t;
    cin >> n >> m >> st >> t;

    // Adjust the graph and dist vectors for 0-indexing
    vector<long long> dist(n, inf);
    vector<int> parent(n, -1); // To reconstruct the path
    vector<vector<pair<int, int>>> graph(n);

    // Reading the edges
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
    }

    // Dijkstra's algorithm
    dist[st] = 0;
    set<pair<long long, int>> s;
    s.insert({0, st});

    while (!s.empty()) {
        auto x = *(s.begin());
        s.erase(x);

        int u = x.second;
        long long d = x.first;

        for (auto it : graph[u]) {
            int v = it.first;
            int w = it.second;

            if (dist[v] > dist[u] + w) {
                s.erase({dist[v], v}); // If v is already in the set, remove it
                dist[v] = dist[u] + w;
                parent[v] = u;  // Store the parent to reconstruct the path
                s.insert({dist[v], v});
            }
        }
    }

    // If there is no path from st to t, print -1
    if (dist[t] == inf) {
        cout << -1 << endl;
    } else {
        // Reconstruct and print the path
        vector<int> path;
        for (int v = t; v != -1; v = parent[v]) {
            path.push_back(v);
        }
        reverse(path.begin(), path.end());

        // Output format:
        // 1. The shortest path length
        // 2. Number of edges in the path
        // 3. The edges in the path
        cout << dist[t] << " " << path.size() - 1 << endl;
        for (int i = 0; i + 1 < path.size(); i++) {
            cout << path[i] << " " << path[i + 1] << endl;
        }
    }

    return 0;
}

