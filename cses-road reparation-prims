#include <bits/stdc++.h>

using namespace std;
#define f first
#define s second
typedef pair<long long, long long> pii; // Pair for weights and vertices
const int maxN = 1e5 + 1;

int N, M, u, v, w;
vector<pii> g[maxN]; // Adjacency list for the graph
long long sum = 0; // Total cost
bool vis[maxN]; // Visited array

void primsMST(int source) {
    priority_queue<pii, vector<pii>, greater<pii>> pq; // Min-heap for edges
    pq.push({0, source}); // Start from the source with weight 0
    while (!pq.empty()) {
        auto [w, u] = pq.top(); // Get the minimum weight edge
        pq.pop();
        
        if (vis[u]) continue; // If already visited, skip
        vis[u] = true; // Mark vertex as visited
        sum += w; // Add weight to total cost

        // Explore adjacent vertices
        for (auto [v, weight] : g[u]) { // Renamed weight to maintain consistency
            if (!vis[v]) {
                pq.push({weight, v}); // Push the edge to the priority queue if not visited
            }
        }
    }
}

int main() {
    cin >> N >> M; // Input number of vertices and edges
    
    for (int i = 0; i < M; i++) {
        cin >> u >> v >> w;
        g[u].push_back({v, w}); // Add edge to adjacency list
        g[v].push_back({u, w}); // Since the graph is undirected
    }
    
    primsMST(1); // Start Prim's algorithm from vertex 1

    // Check if all vertices were visited
    if (count(vis + 1, vis + N + 1, true) == N) {
        cout << sum << endl; // Output the total cost if all vertices are connected
    } else {
        cout << "IMPOSSIBLE" << endl; // If not all vertices are connected
    }
    
    return 0;
}
