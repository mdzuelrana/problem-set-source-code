#include <bits/stdc++.h>
using namespace std;
const int N=1e5+6;
long long n,m;
vector<long long> parent(N);
vector<int> sz(N);
vector<vector<long long>> edges;
int largest_component=1;

void make_pair(int v){
    parent[v]=v;
    sz[v]=1;
}
int find_set(int v){
    if(v==parent[v]){
        return v;
    }
    return parent[v]=find_set(parent[v]);
}
void union_sets(int a,int b){
     a=find_set(a);
     b=find_set(b);
    if(a!=b){
        if(sz[a]<sz[b]){
            swap(a,b);
        }
        parent[b]=a;
        sz[a]+=sz[b];

        largest_component = max(largest_component, sz[a]);
    }

}

int main() {
    
    
    cin>>n>>m;
    
    
    for(int i=1;i<=n;i++){
        make_pair(i);
    }
    int component=n;
    for(int i=0;i<m;i++){
        long long a,b;
        cin>>a>>b;
        edges.push_back({a,b});
        if(find_set(a) != find_set(b)){
            union_sets(a,b);
            component--;
        }
        cout<<component<<" "<<largest_component;
        cout<<endl;
    }
    
    
    
    return 0;
}
