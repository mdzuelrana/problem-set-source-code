#include <bits/stdc++.h>
using namespace std;

const long long INF = 1e18;

int main() {
    int n, m;
    cin >> n >> m;

    // Graph representation: adjacency list
    vector<vector<pair<int, int>>> graph(n + 1);

    // Reading the edges
    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w});  // Since the graph is undirected
    }

    // Dijkstra's algorithm initialization
    vector<long long> dist(n + 1, INF);
    vector<int> parent(n + 1, -1);  // To reconstruct the path
    dist[1] = 0;

    // Min-heap priority queue to store (distance, vertex)
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
    pq.push({0, 1});  // Start from vertex 1

    while (!pq.empty()) {
        auto [d, u] = pq.top();
        pq.pop();

        if (d > dist[u]) continue;  // Skip if it's already processed

        // Explore neighbors
        for (auto &[v, w] : graph[u]) {
            if (dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
                parent[v] = u;  // Track the parent to reconstruct the path
                pq.push({dist[v], v});
            }
        }
    }

    // If no path to vertex n, output -1
    if (dist[n] == INF) {
        cout << -1 << endl;
        return 0;
    }

    // Reconstruct the path from vertex 1 to n
    vector<int> path;
    for (int v = n; v != -1; v = parent[v]) {
        path.push_back(v);
    }
    reverse(path.begin(), path.end());

    // Output the path
    for (int v : path) {
        cout << v << " ";
    }
    cout << endl;

    return 0;
}
